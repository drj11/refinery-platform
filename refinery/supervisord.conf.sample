; Sample config file for managing Celery, Solr and Django dev server processes
; using Supervisor.
; Copy to refinery-platform/refinery/supervisord.conf and customize to match
; your environment.

[supervisord]
logfile = %(here)s/log/supervisord.log
logfile_maxbytes = 1MB
logfile_backups = 4
pidfile = /tmp/supervisord.pid
nocleanup = true

[inet_http_server]         ; inet (TCP) server disabled by default
port = *:9001        ; (ip_address:port specifier, *:port for all iface)

[supervisorctl]
;serverurl = unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
serverurl = http://localhost:9001 ; use an http:// url to specify an inet socket

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:solr]
command = java -Dlog4j.configuration=file://%(here)s/solr/log4j.properties -Djava.awt.headless=true -Dsolr.solr.home=%(here)s/solr/ -jar start.jar
directory = /opt/solr/example
stdout_logfile = %(here)s/log/solr.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 4
redirect_stderr = true
autostart = true
autorestart = true
startsecs = 10

[group:celeryd]
programs = w1,w2,beat
priority = 995

[program:w1]
; minimum of four processes required to avoid problems with monitoring tasks
command = celery --app=celery_app --concurrency=4 --queues=celery --events worker
environment = PATH="/home/vagrant/.virtualenvs/refinery-platform/bin"
stdout_logfile = %(here)s/log/celery-w1.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 4
redirect_stderr = true
autostart = true
autorestart = true
startsecs = 5
stopasgroup = true
killasgroup = true
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
;stopwaitsecs = 60
priority = 995

[program:w2]
; limits concurrency of file imports to one to avoid overloading system IO
command = celery --app=celery_app --concurrency=1 --queues=file_import --events worker
environment = PATH="/home/vagrant/.virtualenvs/refinery-platform/bin"
stdout_logfile = %(here)s/log/celery-w2.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 4
redirect_stderr = true
autostart = true
autorestart = true
startsecs = 5
stopasgroup = true
killasgroup = true
; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
;stopwaitsecs = 60
priority = 995

[program:beat]
command = celery beat
environment = PATH="/home/vagrant/.virtualenvs/refinery-platform/bin"
stdout_logfile = %(here)s/log/celery-beat.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 4
redirect_stderr = true
autostart = true
autorestart = true
startsecs = 3
priority= 996

[program:runserver]
command = python %(here)s/manage.py runserver 0.0.0.0:8000 --noreload
environment = PATH="/home/vagrant/.virtualenvs/refinery-platform/bin"
stdout_logfile = %(here)s/log/refinery.log
stdout_logfile_maxbytes = 1MB
stdout_logfile_backups = 4
redirect_stderr = true
autostart = true
autorestart = true
startsecs = 3
priority = 999
